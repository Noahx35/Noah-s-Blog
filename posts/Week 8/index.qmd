---
title: "Week 8"
author: "Noah"
date: "2023-01-10"
image: "image.jpg"
---

# Mutating Joins

## What does dplr mutate do?

### It is a function that allows you to change something, adding new things, or change properties of existing things

```{r setup, include=FALSE}

library(tidyverse)     # includes readr & tibble

```

```{r}
customers <- tibble(
  id = 1:5,
  city = c("Port Ellen", "Dufftown", NA, "Aberlour", "Tobermory"),
  postcode = c("PA42 7DU", "AB55 4DH", NA, "AB38 7RY", "PA75 6NR")
)
```

```{r}
orders <- tibble(
  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
```

```{r}
orders_B <- tibble(
  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
# How to add a new column
orders_B <- orders_B %>%
  mutate(satisfaction =NA,
           numbers=1:9)

orders_B

```

```{r}
orders_B <- orders_B %>%
  mutate(numbers_as_strings= as.character(numbers))
orders_B
```

```{r}
orders_B %>%
  mutate(items_minus_id= items- id)


```

### Left_join (x,y)

Keeps all the data from the left table and adds anything that matches from the second table.

```{r}
left_data <- left_join(customers, orders, by = "id")
left_data
```

### Left Join (y,x)

```{r}
left2_data <- left_join(orders, customers, by = "id")
left2_data
```

### Right Join (x,y)

```{r}
right_data <- right_join(customers, orders, by = "id")
right_data
```

### Inner Join

```{r}
inner_data <- inner_join(customers, orders, by = "id")
inner_data

```

###Full_join()

```{r}
full_data <- full_join(customers, orders, by = "id")
full_data

```

### Filtering Joins

# Being able to filter the rows you want from your data.

```{r}
full_data <- full_join(customers, orders, by = "id")
full_data %>%
  filter(items > 10)

full_data %>%
  filter(items>21,postcode == "AB38 7RY")
```

```{r}
full_data%>%
  filter(is.na(city)==FALSE)
```

# Day 2

### Writing your own functions

```{r}
## mean
some_numbers <- 1:10

mean(some_numbers)

#Writing your own
mean_A <- function(x){
  return(sum(x)/length(x))
  mean_A(some_numbers)}

  x = 1:15
mean_B <- function(x){
  for(i in x)
    a<- i
}
```

```{r}
  x <- 1:10
temp_sum<-0
temp_length<-0
  for(i in x){
    temp_sum <- temp_sum + i
    temp_length <- temp_length + 1
  }

temp_sum/temp_length

#Made into a function

mean_B<- function(x)
  temp_sum<-0
  temp_length<-0
    for(i in x){
     temp_sum <- temp_sum + i
     temp_length <- temp_length + 1
     print(temp_sum/temp_length)
  }
 print(temp_sum/temp_length)


```

```{r}
Numbers<-c(1,1,1,1,1,2,3,4,5)
a<- 0
b<- 0
c<- 0
d<- 0
e<- 0
  for(i in Numbers){
      if(i==1){a+1}else
      if(i==2){b+1}else
      if(i==3){c+1}else
      if(i==4){d+1}else
      if(i==5){e+1}}
print(b)

```

Min and Max Bubble sort

```{r}
b <- c(2,3,4,3,5,6,7,8,2,21,46,5,23,23,54,67,54,24,78)
bubble_SORT <- function(x){
  swap<-0
  for(i in 2:length(x)){
    if(x[i] < x[i-1]){
      x[i-1] <- x[i]
      x[i]<- x[i-1]
      swap <- swap +1
    }}
return(x)
}
bubble_SORT(b)
```
