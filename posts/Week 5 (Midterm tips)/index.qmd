---
title: "Week 5: Basic Syntax"
author: "Noah"
date: "2023-03-01"
image: "image.jpg wk.5.jpg"
---

### Equal to

```{r}
1 == 1 # is 1 equal to 1?

1 == 2 # is 1 equal to 2?

c(1, 2, 3) == c(2, 1, 3) # compares each element with each element

1 == c(2, 1, 3)

```

### Not Equal to

```{r}
1 != 1 # is 1 equal to 1?

1 != 2 # is 1 equal to 2?

c(1, 2, 3) != c(2, 1, 3) # compares each element with each element

1 != c(2, 1, 3)

```

### Greater than or less than

```{r}
1 > 1 # is 1 greater than 1?

5 > 1 # is 5 greater than 1?

3 < 2 # is 3 less than 2?

3 < 1 # is 3 less than 1?

c(1, 2, 3) > c(2, 1, 3) # ask the question element by element

c(1, 2, 3) < c(2, 1, 3)

2 > c(1, 2, 3) # is greater than each of the numbers



```

### Greater than or Equal to, Less than or Equal to

```{r}
1 >= 1 # is 1 greater than 1?

5 >= 1 # is 5 greater than 1?

3 <= 2 # is 3 less than 2?

3 <= 1 # is 3 less than 1?

c(1, 2, 3) >= c(2, 1, 3) # ask the question element by element

c(1, 2, 3) <= c(2, 1, 3)

2 >= c(1, 2, 3) # is greater than each of the numbers

```

### And

```{r}
 #is 16 divisible by 4 AND 8
16 %% 4 == 0 & 16 %% 8 == 0


# is 16 divisible by 4 AND 3
16 %% 4 == 0 & 16 %% 3 == 0


# is 16 divisible by 8 and 4 and 2
16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0

```

### OR

```{r}
# is 16 divisible by 4 OR 8
16 %% 4 == 0 | 16 %% 8 == 0


# is 16 divisible by 4 OR 3
# it is divisible by 4, so the answer is TRUE
# because at least one of the comparisons is TRUE
16 %% 4 == 0 | 16 %% 3 == 0

```

### IF ELSE statements

```{r}
a <- 1 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
```

```{r}
a <- 2 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}

```

### IF and Else in a loop

```{r}
a <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s

# write a loop to check each element in the variable
# and do different things depending on the element

for (i in a) {
  if (i == 1) {
    print("I'm a 1") # what to do when i is 1
  } else {
    print("I'm not a 1") # what to do when i is not 1
}}
```

### Breaking a loop

```{r}
for(i in 1:10) {
  if (i < 5) {
    print(i)
  } else{
    break #Use the word break
  }
}

```

### While loop

```{r}
i <- 1 # create an variable
while (i < 6) {
  print(i)
  i = i + 1 #add one each step of the loop
}
```

### Repeat Loop

```{r}
i <- 0
repeat {
  i <- i + 1
  print(i)
  if (i == 5) {
    break
  }
}
```

### Example 1 ###(Using the value of the iterator to assign in values systematically to another variable.)

```{r}
# put 1 into the first five positions of x
x <- c() # create empty vector
for (i in 1:5) {
  x[i] <- 1  # assign 1 to the ith slot in x
}
x

```

### Example 2

```{r}
# put the numbers 1-5 in the first 5 positions of x
x <- c()
for (i in 1:5) {
  x[i] <- i
}
x

```

### Example 3 ###Make your own counter, when you need one

```{r}
a <- c(1, 4, 3, 5, 7, 6, 8, 2)
odd <- c()
counter <- 0
for (i in a) {
  # i will the values of a in each position
  counter <- counter + 1
  if (i %% 2 != 0) {
    odd[counter] <- "odd"
  } else {
    odd[counter] <- "even"
  }
}
odd
```
