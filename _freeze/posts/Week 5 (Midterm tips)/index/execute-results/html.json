{
  "hash": "d3ab4b14218b7ce63572f007157a7eee",
  "result": {
    "markdown": "---\ntitle: \"Week 5 Tip Sheet\"\nauthor: \"Noah\"\ndate: \"2023-01-03\"\nimage: \"image.jpg\"\n---\n\n\n###Equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1 # is 1 equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 == 2 # is 1 equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n1 == c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n###Not Equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 != 1 # is 1 equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1 != 2 # is 1 equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n1 != c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n###Greater than or less than\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 1 # is 1 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n5 > 1 # is 5 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3 < 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3 < 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) < c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n2 > c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n### Greater than or Equal to, Less than or Equal to\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 >= 1 # is 1 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 >= 1 # is 5 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3 <= 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3 <= 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) <= c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n2 >= c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n###And\n\n\n::: {.cell}\n\n```{.r .cell-code}\n #is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n###OR\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### IF ELSE statements\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A is not 1\"\n```\n:::\n:::\n\n\n###IF and Else in a loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n}}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n```\n:::\n:::\n\n\n###Breaking a loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break #Use the word break\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n```\n:::\n:::\n\n\n### While loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i = i + 1 #add one each step of the loop\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n###Repeat Loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n###Example 1 ###(Using the value of the iterator to assign in values systematically to another variable.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# put 1 into the first five positions of x\nx <- c() # create empty vector\nfor (i in 1:5) {\n  x[i] <- 1  # assign 1 to the ith slot in x\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 1\n```\n:::\n:::\n\n\n###Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# put the numbers 1-5 in the first 5 positions of x\nx <- c()\nfor (i in 1:5) {\n  x[i] <- i\n}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n###Example 3 ###Make your own counter, when you need one\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 4, 3, 5, 7, 6, 8, 2)\nodd <- c()\ncounter <- 0\nfor (i in a) {\n  # i will the values of a in each position\n  counter <- counter + 1\n  if (i %% 2 != 0) {\n    odd[counter] <- \"odd\"\n  } else {\n    odd[counter] <- \"even\"\n  }\n}\nodd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"odd\"  \"even\" \"odd\"  \"odd\"  \"odd\"  \"even\" \"even\" \"even\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}