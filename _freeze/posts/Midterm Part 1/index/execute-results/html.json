{
  "hash": "dd27c7f3a95544933def9239fc987471",
  "result": {
    "markdown": "---\ntitle: \"Midterm Part 1\"\nauthor: \"Noah\"\ndate: \"2023-01-01\"\n---\n\nWrite a blog post where you demonstrate your ability to use these basic programming concepts in R.\n\n1. R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"This is a string\") #Character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(3.5) #Numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(as.integer((3))) # Integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nmy_list <- list(1,2,3,4,5) \nclass(my_list) #List\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nclass(3>1) # Logical\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\nData Frame\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame\nsal_data<- data.frame( \nstaff=c(1,2,3,4),\nmonthly_salary = c(4000,8000,3000,5000),\nname =c(\"Sam\", \"Dan\", \"David\", \"Adam\"),\nage = c(23,54,18,28)\n)\n\nprint(sal_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  staff monthly_salary  name age\n1     1           4000   Sam  23\n2     2           8000   Dan  54\n3     3           3000 David  18\n4     4           5000  Adam  28\n```\n:::\n:::\n\n\n\n2. Logical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n\n::: {.cell}\n\n```{.r .cell-code}\n1<3  # Should = TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3>1  # Should = FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3==3 # Should = TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1==2 # Should = FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3>=3 # Should = TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3<=1 # Should = FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3>1 | 3<1 # Should = TRUE as only one statement has to be true \"| = or\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n3. Loops: Show that you understand the components of a for loop, and that you can use a for loop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNum = 1:10\nfor (i in Num)\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNum = 1:10\nfor (i in Num){\n  if (i == 7){\n    break}\n  print(i)}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n```\n:::\n:::\n\n\n4. Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does).\n\nConverting Pounds to Kilogram\n\n::: {.cell}\n\n```{.r .cell-code}\nP_to_K<-function(lbs){\n  Kg<- lbs * 0.45359237 \n  paste(Kg,\"Kg\")\n  \n}\n\nP_to_K(34)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"15.42214058 Kg\"\n```\n:::\n:::\n\nConverting Kilograms to Pounds\n\n::: {.cell}\n\n```{.r .cell-code}\nK_to_P<-function(Kg){\n  lbs<- Kg * 2.20462\n  paste(lbs,\"lbs\")\n  \n}\n\nK_to_P(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"22.0462 lbs\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}