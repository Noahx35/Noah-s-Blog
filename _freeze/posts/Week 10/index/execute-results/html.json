{
  "hash": "72dfe6d8b151d8c054d7c9fa4c2a14a3",
  "result": {
    "markdown": "---\ntitle: \"Week 10 Data Tidying\"\nauthor: \"Noah\"\ndate: \"2023-17-04\"\nimage: \"image.jpg\"\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\nWrite your blog post, and submit the link to this assignment on blackboard. Blog post ideas will be discussed in class, and this assignment will be updated for clarity.\nThere are several options for completing this post. The most open-ended option is to read the textbook chapter and use your blog post to demonstrate that you can accomplish the major topics covered in the chapter.\n\nAlternatively (or additionally), you can focus on accomplishing these two major goals:\n\nA. Explain the concept of tidy data.\n\nB. Demonstrate that you can use the pivot_longer and pivot_wider functions. Explain their use cases.\n\nC. Section 8.5 of the textbook shows an example of using pipes to accomplish several data tidying steps.\n\nShow that you can compile and run this code on your blog.\nAdd comments to the code to show that you can explain the meaning of each step.\n\n::: {.cell}\n\n```{.r .cell-code}\n# select just the customer ID and 3 total price columns\n#wide_totalprice <- untidy_data[,] \n #untidy_data[,c(5,6,7)]\n# select just the customer ID and 3 total price columns\n\nwide_totalprice <- select( #select the data sey and create a new data frame \n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018, # rename if needed\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = `2018`:`2020`, # select the col you want to pivot longer\n  names_to = \"year\", # changing the names of the cols\n  values_to = \"totalprice\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wide by customer \nwide_by_customer <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = customer_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\n# Wide by year\nwide_by_year <- pivot_wider(\n  data = long_totalprice,\n  id_cols = customer_id, # identifying column(s)\n  names_from = year, # the new column names\n  values_from = totalprice # the new column values\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\n# check the data types\nglimpse(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}