{
  "hash": "1a5e1932bd7b710811274cf936604e5f",
  "result": {
    "markdown": "---\ntitle: \"Week 11 Data Wrangling\"\nauthor: \"Noah\"\ndate: \"2023-24-04\"\nimage: \"image.jpg\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget <- read_csv(\"data/budget.csv\", show_col_types = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Two ways to do this by listing names or the number of the col. \n# select single column by name\nproduct_dat <- budget %>% select(product) \n\n# select single column by number\nproduct_dat <- budget %>% select(2) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(knitr::kable(product_dat))\n```\n\n::: {.cell-output-display}\n|product |\n|:-------|\n|widgets |\n|gadgets |\n|widgets |\n|gadgets |\n|widgets |\n|gadgets |\n|widgets |\n|gadgets |\n:::\n:::\n\n### Colon Notation \n### Select functions\n\n::: {.cell}\n\n```{.r .cell-code}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon selected the begining and end of the range you would like to have.\nsales2019 <- budget %>% select(region:sales_2019)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\n\nregions <- budget %>% select(`Sales Region` = 1, 3:6)\n\nhead(regions, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  `Sales Region` sales_2019 sales_2020 expenses_2019 expenses_2020\n  <chr>               <dbl>      <dbl>         <dbl>         <dbl>\n1 North                2129       -517           822          -897\n2 North                 723         77          1037          1115\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use a subtraction sign to get rid of certain cols.\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))\n```\n:::\n\n\n\n### Filter\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# everything but the North\nbudget %>% filter(region != \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n```\n:::\n\n\n### %in%\n\n::: {.cell}\n\n```{.r .cell-code}\n# retain any rows where region is north or south, and where product equals widget\n# It will look through the region col and will keep all the ones that say North and South and then filter them by widgets.\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n### Finding the index, use the which function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(letters %in% \"l\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### Arrange prodcuts \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget %>%\n  mutate(region = factor(region, levels = c(\"North\", \"South\", \"East\", \"West\"))) %>%\n  filter(product == \"gadgets\") %>%\n  arrange(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <fct>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  gadgets        723         77          1037        1115 very h… very h…\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   gadgets       -423       -354            94        2036 neutral high   \n4 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n# DAY TWO\n\n###Mutate \n\n::: {.cell}\n\n```{.r .cell-code}\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n```\n:::\n\n# Asking if the office made a profit (LOGIC)\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n```\n:::\n\n# Profit cat.\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n```\n:::\n\n# Analyize satisfaction\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a column where people get a bonus if customer satisfaction was overall high or very high\n\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n                                satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned\n\nbonus2 <- budget3 %>%\n  mutate(bonus_2020 = case_when(satisfaction_2020 == \"high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                satisfaction_2020 == \"very high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                TRUE ~ \"No bonus\")) # set all other values to \"no bonus\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudgettest <- budget %>%\n  mutate(\n    A = 1,\n    B = 1:8,\n    c = mean(1:8),\n    D = rep(1:2,4)\n\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"North\",\"Office\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"North Office\"\n```\n:::\n\n```{.r .cell-code}\npaste0(\"North\",\"Office\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NorthOffice\"\n```\n:::\n:::\n\n\n# Summarize\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_prod <- budget4 %>%\n  group_by(year, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}