{
  "hash": "8ba07f78372ae90be53675aba51f7171",
  "result": {
    "markdown": "---\ntitle: \"Week 5 Data Import \"\nauthor: \"Noah\"\neval: true\necho: true\ndate: \"2023-02-28\"\nimage: \"image.jpg wk5.jpg\"\n---\n\n\n# Week 5 Assignment\n\n### \"Write your blog post, and submit the link to this assignment on blackboard. Blog post ideas will be discussed in class, and this assignment will be updated for clarity.\n\n\n\n\n\n###Ways to view your dATA\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#data() , allows you to view all the data sets\n#view(cars) , allows you to view specific data sets\n#print(cars) , it prints the data to the console\n#glimpse(cars) , gives you a small preview of the first 10-20 data points\n#head(cars) , gives you a table format of the first 10-20 data points\n#summary(cars), gives basic info min, max, mean, median, 1st ,and 3rd interquartile range\n```\n:::\n\n\n###Summarytools\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(summarytools)\n# Error in loading\"\n```\n:::\n\n\n### Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\n\ndemo_tsv <- import(file = \"data/demo.tsv\") # Tab seperate factor\ndemo_csv  <- import(\"data/demo.csv\")  # comma-separated values\ndemo_xls  <- import(\"data/demo.xlsx\") # Excel format\ndemo_sav  <- import(\"data/demo.sav\")  # SPSS format\n\nglimpse(demo_tsv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <IDate> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n```\n:::\n\n```{.r .cell-code}\ndemo_tsv$character # does not have the concept of levels\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n```\n:::\n\n```{.r .cell-code}\ndemo_tsv$dactor # has the concept of levels\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Using the spec() function allows you to change or treat things as they come in.\ndemo<- readr::read_csv(\"data/demo.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncorrected_cols <- cols(\n  character = col_character(),\n  factor = col_factor(levels = c(\"low\", \"med\", \"high\")), # specify the order you want\n  integer = col_integer(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ndemo <- readr::read_csv(\"data/demo.csv\", col_types = corrected_cols)\nspec(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  character = col_character(),\n  factor = col_factor(levels = c(\"low\", \"med\", \"high\"), ordered = FALSE, include_na = FALSE),\n  integer = col_integer(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n```\n:::\n\n```{.r .cell-code}\nglimpse(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <fct> high, low, med, high, low, med\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <date> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n```\n:::\n:::\n\n\n###Google Sheet Load Google SHeet\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_deauth() # skip authorisation for public data\n\ndemo_gs4  <- googlesheets4::read_sheet(\n  ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"demo\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range 'Sheet1'.\n```\n:::\n:::\n\n\n### Creating Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\navatar <- tibble( \n  name = c(\"Katara\", \"Toph\", \"Sokka\"), # char string \n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE,\n  numbers = c(1,2,3),\n  more_numbers = 1:3,\n  even_more= seq(1,2,3)\n)\n\n# print it\navatar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  name   bends friendly numbers more_numbers even_more\n  <chr>  <chr> <lgl>      <dbl>        <int>     <dbl>\n1 Katara water TRUE           1            1         1\n2 Toph   earth TRUE           2            2         1\n3 Sokka  <NA>  TRUE           3            3         1\n```\n:::\n:::\n\n\n###Export Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#export(avatar, \"data/avatar.csv\")\n```\n:::\n\n\n###Writing Data\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}